by"""
Django settings for LaundryConfig project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from django.templatetags.static import static
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _
import os
from LaundryConfig.env import BASE_DIR, env
import dj_database_url
from decouple import config

# import dj_database_url
# from decouple import config

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')
# TWILIO_ACCOUNT_SID = env("TWILIO_ACCOUNT_SID")
# TWILIO_AUTH_TOKEN = env("TWILIO_AUTH_TOKEN")
# TWILIO_PHONE_NUMBER = env("TWILIO_PHONE_NUMBER")




# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DJANGO_DEBUG', default=False)  # Set to False for production

# This allows your Render URL to be a valid hos*t
ALLOWED_HOSTS = [
    'https://elite-laundry0010.onrender.com',
    'https://cleanpage.shop',
    'https://www.cleanpage.shop',
]

CSRF_TRUSTED_ORIGINS = [
    'https://elite-laundry0010.onrender.com',
    'https://cleanpage.shop',
    'https://www.cleanpage.shop',
]



SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE =True
CSRF_COOKIE_SECURE = True




# NPM_BIN_PATH = os.environ.get("NPM_BIN_PATH", None)
# Application definition

INSTALLED_APPS = [
    # IMPORTANT: Add whitenoise to INSTALLED_APPS for it to be recognized
    # by collectstatic and for its static file storage engine to work.
    'whitenoise.runserver_nostatic', # For development
    'multiselectfield', 
    'rest_framework',
    "unfold",
    'django_registration',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'LaundryApp',
    'HotelApp',
    
    'tailwind',
    'crispy_forms',
    'import_export',
    'django_daraja',
    'theme',
    'compressor',
    "widget_tweaks",
    'OpenSSL'
]

MIDDLEWARE = [
    
    'django.middleware.security.SecurityMiddleware',
    # Place Whitenoise middleware at the top for efficiency
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'LaundryApp.middleware.ActiveShopMiddleware',
    
]

ACCOUNT_ACTIVATION_DAYS = 0  # One-week activation window
REGISTRATION_OPEN = True
TAILWIND_APP_NAME = 'theme'
TAILWIND_CONFIG_FILE = 'tailwind.config.js'
TAILWIND_CSS_INPUT_FILE = 'src/input.css'
TAILWIND_CSS_OUTPUT_FILE = 'css/output.css'

CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"



EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_AUTO_FIELD = env('DEFAULT_AUTO_FIELD')




# For production: use real SMTP (example with Gmail)
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')  # not your Gmail password, use App Password

AUTH_USER_MODEL = 'LaundryApp.UserProfile'
ROOT_URLCONF = 'LaundryConfig.urls'
  # after login, always check role
LOGOUT_REDIRECT_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = 'select_shop'


LOGIN_URL = 'login'

AUTHENTICATION_BACKENDS = [
    # 'LaundryApp.backends.EmailOrUsernameModelBackend',
    'django.contrib.auth.backends.ModelBackend',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'LaundryApp.context_processors.active_shop',
            ],
             'builtins': [
                'django.contrib.humanize.templatetags.humanize',  # Add this
            ],
        },
    },
]

WSGI_APPLICATION = 'LaundryConfig.wsgi.application'

# NPM_BIN_PATH = "Users\Ezekiel Kirui\AppData\Roaming\npm\npm.cmd"
# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }




# AFRICAS_TALKING_USERNAME = env("AFRICAS_TALKING_USERNAME")
# AFRICAS_TALK_API_KEY = env("AFRICAS_TALK_API_KEY")

DATABASES = {
    'default': dj_database_url.config(
        default=os.getenv('DATABASE_URL'),
        conn_max_age=600,
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'


TIME_ZONE = 'Africa/Nairobi'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# Configure static files for production
STATIC_URL = 'static/'

# Tell Django where to collect all static files for production
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') 

# Tell Django where to look for your static files during development
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Tell Whitenoise to compress your static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# settings.py
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'LaundryApp': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

