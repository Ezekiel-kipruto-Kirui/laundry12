"""
Django settings for LaundryConfig project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from django.templatetags.static import static
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _
import os
from LaundryConfig.env import BASE_DIR, env

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')
TWILIO_ACCOUNT_SID = env("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = env("TWILIO_AUTH_TOKEN")
TWILIO_PHONE_NUMBER = env("TWILIO_PHONE_NUMBER")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DJANGO_DEBUG', default=False)  # Set to False for production

# This allows your Render URL to be a valid host
ALLOWED_HOSTS = ['laundry12-4.onrender.com', '*']


# Application definition

INSTALLED_APPS = [
    # IMPORTANT: Add whitenoise to INSTALLED_APPS for it to be recognized
    # by collectstatic and for its static file storage engine to work.
    'whitenoise.runserver_nostatic', # For development
    
    'unfold',
    'unfold.contrib.import_export',
    'unfold.contrib.filters',
    'django_registration',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'LaundryApp',
    'tailwind',
    'crispy_forms',
    'import_export',
    'django_daraja',
    'theme'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # Place Whitenoise middleware at the top for efficiency
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
TAILWIND_APP_NAME = 'theme'
TAILWIND_CONFIG_FILE = 'tailwind.config.js'
TAILWIND_CSS_INPUT_FILE = 'src/input.css'
TAILWIND_CSS_OUTPUT_FILE = 'css/output.css'
CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"


DEFAULT_AUTO_FIELD = env('DEFAULT_AUTO_FIELD')

MPESA_ENVIRONMENT = env('MPESA_ENVIRONMENT')
MPESA_CONSUMER_KEY = env('MPESA_CONSUMER_KEY')
MPESA_CONSUMER_SECRET = env('MPESA_CONSUMER_SECRET')
MPESA_SHORTCODE = env('MPESA_SHORTCODE')
MPESA_EXPRESS_SHORTCODE = env('MPESA_EXPRESS_SHORTCODE')
MPESA_SHORTCODE_TYPE = env('MPESA_SHORTCODE_TYPE')
MPESA_PASSKEY = env('MPESA_PASSKEY')
MPESA_INITIATOR_USERNAME = env('MPESA_INITIATOR_USERNAME')
MPESA_INITIATOR_SECURITY_CREDENTIAL = env('MPESA_INITIATOR_SECURITY_CREDENTIAL')


ROOT_URLCONF = 'LaundryConfig.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LaundryConfig.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Configure static files for production
STATIC_URL = 'static/'

# Tell Django where to collect all static files for production
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') 

# Tell Django where to look for your static files during development
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Tell Whitenoise to compress your static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# settings.py
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'LaundryApp': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

UNFOLD = {
    "SITE_TITLE": "ELITE Laundry",
    "SITE_HEADER": "Elite Laundry Management System",
    "SITE_SUBHEADER": "Performance Analytics & Administration",
    "SITE_URL": "/admin/",
    "SITE_ICON": {
        "light": lambda request: static("icons/laundry-light.svg"),
        "dark": lambda request: static("icons/laundry-dark.svg"),
    },
    "SITE_LOGO": {
        "light": lambda request: static("logos/laundry-logo-light.svg"),
        "dark": lambda request: static("logos/laundry-logo-dark.svg"),
    },
    "SITE_SYMBOL": "local_laundry_service", # Material icon for laundry
    "SHOW_HISTORY": True,
    "SHOW_VIEW_ON_SITE": True,
    "SHOW_BACK_BUTTON": True,
    "THEME": None, # Correctly set to None to allow user theme choice

    "SHOW_RECENT_ACTIONS": lambda request: request.user.is_superuser,
    "TEMPLATES": {
        "index": "admin/index.html",   # Point to our custom template
    },
    
    "COLORS": {
        # Define a single color palette that Unfold can map to both themes.
        "primary": {
            50: '#fdf2f8',
            100: '#fce7f3',
            200: '#fbcfe8',
            300: '#f9a8d4',
            400: '#f472b6',
            500: '#ec4899',
            600: '#db2777',
            700: '#be185d',
            800: '#9d174d',
            900: '#831843',
        },
        "secondary": {
            50: "#f5f3ff",
            100: "#ede9fe",
            200: "#ddd6fe",
            300: "#c4b5fd",
            400: "#a78bfa",
            500: "#8b5cf6",
            600: "#7c3aed",
            700: "#6d28d9",
            800: "#5b21b6",
            900: "#4c1d95",
            950: "#241151",
        },
        "font": {
            # Unfold's default is to use light colors for dark themes and dark for light themes.
            # Your previous config had subtle-light and subtle-dark reversed.
            
        },
    },
   "SIDEBAR": {
    "show_search": True,
    "navigation": [
        {
            "title": "Dashboard",
            "items": [
                {
                    "title": "Dashboard",
                    "icon": "analytics",
                    "link": reverse_lazy("admin:index"),
                   
                },
                {
                    "title": "Report",
                    "icon": "analytics",
                    "link": reverse_lazy("admin:laundryapp_dashboard"),
                    "permission": lambda request: request.user.is_superuser
                },
            ],
        },
        {
            "title": "Operations",
            "items": [
                {
                    "title": "Add Order",  # NEW: Add this item for the order form
                    "icon": "add_shopping_cart",  # or "add_circle", "create", "note_add"
                    "link": reverse_lazy("admin:createorder"),
                },
                {
                    "title": "View Orders",
                    "icon": "receipt",
                    "link": reverse_lazy("admin:customordertable"),
                },
                {
                    "title": "Customers",
                    "icon": "people",
                    "link": reverse_lazy("admin:LaundryApp_customer_changelist"),
                },
            ],
        },
        {
            "title": "Administration",
            "items": [
              
                {
                    "title": "Groups",
                    "icon": "groups",
                    "link": reverse_lazy("admin:auth_group_changelist"),
                    "permission": lambda request: request.user.is_superuser
                },
                 
                {
                    "title": "Users",
                    "icon": "people",
                    "link": reverse_lazy("admin:auth_user_changelist"),
                    "permission": lambda request: request.user.is_superuser
                },
            ],
        },
    ],
},
}